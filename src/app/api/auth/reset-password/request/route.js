import { NextResponse } from "next/server";
import jwt from "jsonwebtoken";
import connectToDatabase from "@/utils/db";
import User from "@/models/User";

export async function POST(req) {
  await connectToDatabase();
  const { email } = await req.json();

  const user = await User.findOne({ email });
  if (!user) {
    return NextResponse.json(
      { error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π" },
      { status: 404 },
    );
  }

  // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–æ–∫–µ–Ω –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è (–¥—ñ–π—Å–Ω–∏–π 1 –≥–æ–¥–∏–Ω—É)
  const resetToken = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
    expiresIn: "1h",
  });

  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω —É –±–∞–∑—ñ
  user.resetPasswordToken = resetToken;
  user.resetPasswordExpires = Date.now() + 3600000; // 1 –≥–æ–¥–∏–Ω–∞
  await user.save();

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ BASE_URL –∑ .env
  const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:3000";
  const resetLink = `${baseUrl}/reset-password?token=${resetToken}`;

  console.log(`üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è: ${resetLink}`);

  return NextResponse.json({
    message: "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ email –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è",
    resetLink,
  });
}
