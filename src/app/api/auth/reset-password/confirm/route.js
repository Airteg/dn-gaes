import { NextResponse } from "next/server";
import { jwtVerify } from "jose"; // üîπ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ `jose` –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
import bcrypt from "bcryptjs";
import connectToDatabase from "@/utils/db";
import User from "@/models/User";

const secret = new TextEncoder().encode(process.env.JWT_SECRET); // üîπ –ö–ª—é—á –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó

export async function POST(req) {
  await connectToDatabase();
  const { token, newPassword } = await req.json();

  try {
    // üîπ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ `jose`
    const { payload } = await jwtVerify(token, secret);
    const user = await User.findById(payload.id);

    if (
      !user ||
      user.resetPasswordToken !== token ||
      user.resetPasswordExpires < Date.now()
    ) {
      return NextResponse.json(
        { error: "–ù–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π —Ç–æ–∫–µ–Ω" },
        { status: 400 },
      );
    }

    // –•–µ—à—É—î–º–æ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;

    // –í–∏–¥–∞–ª—è—î–º–æ —Ç–æ–∫–µ–Ω –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è
    user.resetPasswordToken = null;
    user.resetPasswordExpires = null;
    await user.save();

    return NextResponse.json({ message: "–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ" });
  } catch (error) {
    return NextResponse.json({ error: "–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω" }, { status: 400 });
  }
}
