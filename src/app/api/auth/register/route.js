import { NextResponse } from "next/server";
import bcrypt from "bcryptjs";
import connectToDatabase from "@/utils/db";
import User from "@/models/User";

export async function POST(req) {
  try {
    await connectToDatabase();
    const {
      email,
      password,
      firstName,
      lastName,
      nickname,
      position,
      placeOfWork,
    } = await req.json();

    // üîπ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    const existingUser = await User.findOne({ $or: [{ email }, { nickname }] });
    if (existingUser) {
      return NextResponse.json(
        { error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ–∑ —Ç–∞–∫–∏–º email –∞–±–æ nickname –≤–∂–µ —ñ—Å–Ω—É—î" },
        { status: 400 },
      );
    }

    // üîπ –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
    const hashedPassword = await bcrypt.hash(password, 10);

    // üîπ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º "pending"
    const newUser = await User.create({
      email,
      password: hashedPassword,
      firstName,
      lastName,
      nickname,
      position,
      placeOfWork,
      role: "user",
      status: "pending",
    });

    return NextResponse.json(
      {
        message: "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
      },
      { status: 201 },
    );
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", error);
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" },
      { status: 500 },
    );
  }
}
