import { NextResponse } from "next/server";
import jwt from "jsonwebtoken";

import { authMiddleware } from "@/middleware/authMiddleware";
import connectToDatabase from "@/utils/db";
import Document from "@/models/Document";

// üìå –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –±–∞—á–∞—Ç—å –≤—Å—ñ, –≥–æ—Å—Ç—ñ ‚Äì —Ç—ñ–ª—å–∫–∏ `shareholdersOnly: false`)
export const GET = async (req) => {
  await connectToDatabase();

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ç–æ–∫–µ–Ω
  const authHeader = req.headers.get("authorization");
  let user = null;

  if (authHeader && authHeader.startsWith("Bearer ")) {
    try {
      const token = authHeader.split(" ")[1];
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      user = decoded;
      console.log("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:", user);
    } catch (error) {
      console.error("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω:", error);
    }
  }
  console.log("üìå –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –¥–æ /api/documents");
  console.log("üìå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è:", authHeader || "–ì—ñ—Å—Ç—å");

  // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ù–ï –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π, –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ `shareholdersOnly: false`
  const filter = user ? {} : { shareholdersOnly: false };
  console.log("üöÄ ~ filter:", filter);

  const documents = await Document.find(filter);
  return NextResponse.json(documents);
};

// üìå –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ñ–≤ —Ç–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)
export const POST = authMiddleware(
  async (req) => {
    await connectToDatabase();
    const body = await req.json();

    const newDocument = new Document({
      title: body.title,
      description: body.description,
      category: body.category,
      subcategory: body.subcategory || "",
      filePath: body.filePath,
      uploadedBy: body.uploadedBy,
      isArchived: false,
      isDeleted: false,
      shareholdersOnly: body.shareholdersOnly || false,
    });

    await newDocument.save();
    return NextResponse.json({ message: "–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–¥–∞–Ω–æ" }, { status: 201 });
  },
  ["moderator", "admin"],
);

// üìå –í–∏–¥–∞–ª–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç (–ø–æ–º—ñ—Ç–∏—Ç–∏ —è–∫ `isDeleted: true`, —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä)
export const DELETE = authMiddleware(
  async (req) => {
    await connectToDatabase();
    const { id } = await req.json();

    const document = await Document.findById(id);
    if (!document)
      return NextResponse.json(
        { error: "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" },
        { status: 404 },
      );

    document.isDeleted = true;
    await document.save();

    return NextResponse.json({
      message: "–î–æ–∫—É–º–µ–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–æ (isDeleted: true)",
    });
  },
  ["moderator", "admin"],
);
