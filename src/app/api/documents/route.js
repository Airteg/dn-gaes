import { NextResponse } from "next/server";
import { jwtVerify } from "jose"; // üîπ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ `jose`
import clientPromise from "@/utils/db";

const secret = new TextEncoder().encode(process.env.JWT_SECRET); // üîπ –ö–ª—é—á –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó

// üìå –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –±–∞—á–∞—Ç—å –≤—Å—ñ, –≥–æ—Å—Ç—ñ ‚Äì —Ç—ñ–ª—å–∫–∏ `shareholdersOnly: false`)
export const GET = async (req) => {
  const client = await clientPromise;
  const db = client.db();

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ç–æ–∫–µ–Ω
  const authHeader = req.headers.get("authorization");
  let user = null;

  if (authHeader && authHeader.startsWith("Bearer ")) {
    try {
      const token = authHeader.split(" ")[1];

      // üîπ –ó–∞–º—ñ—Å—Ç—å `jwt.verify()`, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ `await jwtVerify()`
      const { payload } = await jwtVerify(token, secret);
      user = payload;

      console.log("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:", user);
    } catch (error) {
      console.error("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω:", error);
    }
  }

  console.log("üìå –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –¥–æ /api/documents");
  console.log("üìå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è:", authHeader || "–ì—ñ—Å—Ç—å");

  // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ù–ï –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π, –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ `shareholdersOnly: false`
  const filter = user ? {} : { shareholdersOnly: false };
  console.log("üöÄ ~ filter:", filter);

  const documents = await db.collection("documents").find(filter).toArray();
  return NextResponse.json(documents);
};
