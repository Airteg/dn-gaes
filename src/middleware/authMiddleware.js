import { NextResponse } from "next/server";
import { jwtVerify } from "jose"; // üîπ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ jose –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞

const secret = new TextEncoder().encode(process.env.JWT_SECRET); // üîπ –ì–æ—Ç—É—î–º–æ —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á

export function authMiddleware(handler, requiredRole = null) {
  return async (req) => {
    console.log("üìå –û—Ç—Ä–∏–º–∞–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏:", req.headers.get("authorization"));

    const authHeader = req.headers.get("authorization");
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      console.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π!");
      return NextResponse.json(
        { error: "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø" },
        { status: 401 },
      );
    }

    const token = authHeader.split(" ")[1];

    try {
      // üîπ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ `jose`
      const { payload } = await jwtVerify(token, secret);
      console.log("‚úÖ –¢–æ–∫–µ–Ω –¥—ñ–π—Å–Ω–∏–π, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:", payload);

      req.user = payload; // üîπ –¢–µ–ø–µ—Ä req –º—ñ—Å—Ç–∏—Ç—å `user`

      if (requiredRole) {
        const roles = Array.isArray(requiredRole)
          ? requiredRole
          : [requiredRole];
        if (!roles.includes(payload.role)) {
          console.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤:", payload.role);
          return NextResponse.json(
            { error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤" },
            { status: 403 },
          );
        }
      }

      return handler(req);
    } catch (error) {
      console.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π!", error);
      return NextResponse.json(
        { error: "–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π —Ç–æ–∫–µ–Ω" },
        { status: 401 },
      );
    }
  };
}
