import { NextResponse } from "next/server";
import jwt from "jsonwebtoken";

export function authMiddleware(handler, requiredRole = null) {
  return async (req) => {
    console.log("üìå –û—Ç—Ä–∏–º–∞–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏:", req.headers.get("authorization"));

    const authHeader = req.headers.get("authorization");
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      console.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π!");
      return NextResponse.json(
        { error: "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø" },
        { status: 401 },
      );
    }

    const token = authHeader.split(" ")[1];

    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      console.log("‚úÖ –¢–æ–∫–µ–Ω –¥—ñ–π—Å–Ω–∏–π, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:", decoded);
      req.user = decoded;

      if (requiredRole) {
        const roles = Array.isArray(requiredRole)
          ? requiredRole
          : [requiredRole];
        if (!roles.includes(decoded.role)) {
          console.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤:", decoded.role);
          return NextResponse.json(
            { error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤" },
            { status: 403 },
          );
        }
      }

      return handler(req);
    } catch (error) {
      console.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π!", error);
      return NextResponse.json(
        { error: "–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π —Ç–æ–∫–µ–Ω" },
        { status: 401 },
      );
    }
  };
}
