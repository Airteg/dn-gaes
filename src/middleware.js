import { NextResponse } from "next/server";
import { getToken } from "next-auth/jwt";

const protectedRoutes = ["/admin", "/dashboard"];
const adminRoutes = ["/admin"];
const restrictedAdminRoutes = ["/admin/users"];

export default async function middleware(req) {
  // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω —ñ–∑ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º
  const token = await getToken({
    req,
    secret: process.env.NEXTAUTH_SECRET,
    cookieName: "__Secure-authjs.session-token", // –Ø–≤–Ω–æ –≤–∫–∞–∑—É—î–º–æ —ñ–º'—è cookie
    secureCookie: true, // –í–∫–∞–∑—É—î–º–æ, —â–æ —Ü–µ secure cookie (–¥–ª—è HTTPS)
  });
  const { pathname } = req.nextUrl;

  // –õ–æ–≥—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  console.log("üöÄ ~ Middleware details:", {
    pathname,
    token, // –õ–æ–≥—É—î–º–æ —Ç–æ–∫–µ–Ω (–∞–±–æ null, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î)
    cookies: req.cookies.getAll(), // –õ–æ–≥—É—î–º–æ –≤—Å—ñ cookies, —è–∫—ñ –ø—Ä–∏—Ö–æ–¥—è—Ç—å —ñ–∑ –∑–∞–ø–∏—Ç–æ–º
    NEXTAUTH_SECRET: process.env.NEXTAUTH_SECRET ? "Set" : "Not set", // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î NEXTAUTH_SECRET
    cookieName: "__Secure-authjs.session-token", // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ —ñ–º'—è cookie
  });

  const isProtectedRoute = protectedRoutes.some((route) =>
    pathname.startsWith(route),
  );
  const isAdminRoute = adminRoutes.some((route) => pathname.startsWith(route));
  const isRestrictedAdminRoute = restrictedAdminRoutes.some((route) =>
    pathname.startsWith(route),
  );

  // –ì—ñ—Å—Ç—å ‚Äî –Ω–∞ –ª–æ–≥—ñ–Ω
  if (isProtectedRoute && !token) {
    console.log("No token, redirecting to /login from:", pathname);
    return NextResponse.redirect(new URL("/login", req.url));
  }

  // –Ø–∫—â–æ —î —Ç–æ–∫–µ–Ω
  if (token) {
    // –í–≤–∞–∂–∞—î–º–æ undefined —è–∫ "user"
    const role = token.role || "user";
    console.log("üöÄ ~ Effective role:", role);

    // –ë–ª–æ–∫—É—î–º–æ /admin –¥–ª—è "user" (–≤–∫–ª—é—á–∞—é—á–∏ undefined)
    if (isAdminRoute && role === "user") {
      console.log("Access denied for user:", { email: token.email, role });
      return NextResponse.redirect(new URL("/", req.url));
    }

    // –ë–ª–æ–∫—É—î–º–æ /admin/users –¥–ª—è "moderator"
    if (isRestrictedAdminRoute && role === "moderator") {
      console.log("Access denied for moderator:", { email: token.email, role });
      return NextResponse.redirect(new URL("/admin", req.url));
    }
  }

  return NextResponse.next();
}

export const config = {
  matcher: ["/dashboard", "/admin", "/api/auth/session"],
};
